{"version":3,"sources":["../../../../src/pkg/nuclide-language-service-rpc/lib/NullLanguageService.js"],"names":["NullLanguageService","getDiagnostics","fileVersion","Promise","resolve","observeDiagnostics","empty","publish","getAutocompleteSuggestions","position","request","getDefinition","findReferences","of","getCoverage","filePath","getOutline","getAdditionalLogFiles","deadline","getCodeActions","range","diagnostics","typeHint","highlight","formatSource","options","formatEntireFile","formatAtPosition","triggerCharacter","getEvaluationExpression","supportsSymbolSearch","directories","symbolSearch","query","getProjectRoot","fileUri","isFileInProject","getExpandedSelectionRange","currentSelection","getCollapsedSelectionRange","originalCursorPosition","dispose"],"mappings":";;;;;;;AAqCA;;AAEA;AACA;AAxCA;;;;;;;;;;;;AAyCO,MAAMA,mBAAN,CAA0B;AAC/BC,iBAAeC,WAAf,EAAsE;AACpE,WAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDC,uBAA+D;AAC7D,WAAO,iBAAWC,KAAX,GAAmBC,OAAnB,EAAP;AACD;;AAEDC,6BACEN,WADF,EAEEO,QAFF,EAGEC,OAHF,EAIgC;AAC9B,WAAOP,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDO,gBACET,WADF,EAEEO,QAFF,EAGmC;AACjC,WAAON,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDQ,iBACEV,WADF,EAEEO,QAFF,EAGgD;AAC9C,WAAO,iBAAWI,EAAX,CAAc,IAAd,EAAoBN,OAApB,EAAP;AACD;;AAEDO,cAAYC,QAAZ,EAA4D;AAC1D,WAAOZ,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDY,aAAWd,WAAX,EAAwD;AACtD,WAAOC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDa,wBACEC,QADF,EAEqC;AACnC,WAAOf,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDe,iBACEjB,WADF,EAEEkB,KAFF,EAGEC,WAHF,EAI8B;AAC5B,WAAOlB,QAAQC,OAAR,CAAgB,EAAhB,CAAP;AACD;;AAEDkB,WAASpB,WAAT,EAAmCO,QAAnC,EAA6E;AAC3E,WAAON,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDmB,YACErB,WADF,EAEEO,QAFF,EAG+B;AAC7B,WAAON,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDoB,eACEtB,WADF,EAEEkB,KAFF,EAGEK,OAHF,EAI6B;AAC3B,WAAOtB,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDsB,mBACExB,WADF,EAEEkB,KAFF,EAGEK,OAHF,EAOG;AACD,WAAOtB,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDuB,mBACEzB,WADF,EAEEO,QAFF,EAGEmB,gBAHF,EAIEH,OAJF,EAK6B;AAC3B,WAAOtB,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDyB,0BACE3B,WADF,EAEEO,QAFF,EAGyC;AACvC,WAAON,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED0B,uBAAqBC,WAArB,EAAuE;AACrE,WAAO5B,QAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED4B,eACEC,KADF,EAEEF,WAFF,EAGiC;AAC/B,WAAO5B,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED8B,iBAAeC,OAAf,EAA0D;AACxD,WAAOhC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDgC,kBAAgBD,OAAhB,EAAuD;AACrD,WAAOhC,QAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAEDiC,4BACEnC,WADF,EAEEoC,gBAFF,EAGwB;AACtB,WAAOnC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDmC,6BACErC,WADF,EAEEoC,gBAFF,EAGEE,sBAHF,EAIwB;AACtB,WAAOrC,QAAQC,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAEDqC,YAAgB,CAAE;AArIa;;QAApBzC,mB,GAAAA,mB,EAwIb;;AACG,IAAH","file":"NullLanguageService.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {NuclideUri} from 'nuclide-commons/nuclideUri';\nimport type {DeadlineRequest} from 'nuclide-commons/promise';\nimport type {AdditionalLogFile} from '../../nuclide-logging/lib/rpc-types';\nimport type {FileVersion} from '../../nuclide-open-files-rpc/lib/rpc-types';\nimport type {TextEdit} from 'nuclide-commons-atom/text-edit';\nimport type {TypeHint} from '../../nuclide-type-hint/lib/rpc-types';\nimport type {CoverageResult} from '../../nuclide-type-coverage/lib/rpc-types';\nimport type {\n  DefinitionQueryResult,\n  FindReferencesReturn,\n  Outline,\n  CodeAction,\n} from 'atom-ide-ui';\nimport type {ConnectableObservable} from 'rxjs';\nimport type {NuclideEvaluationExpression} from 'nuclide-debugger-common';\nimport type {\n  AutocompleteRequest,\n  AutocompleteResult,\n  FileDiagnosticMap,\n  FileDiagnosticMessage,\n  FormatOptions,\n  LanguageService,\n  SymbolResult,\n} from '../../nuclide-language-service/lib/LanguageService';\n\nimport {Observable} from 'rxjs';\n\n// An implementation of LanguageService which always returns no results.\n// Useful for implementing aggregate language services.\nexport class NullLanguageService {\n  getDiagnostics(fileVersion: FileVersion): Promise<?FileDiagnosticMap> {\n    return Promise.resolve(null);\n  }\n\n  observeDiagnostics(): ConnectableObservable<FileDiagnosticMap> {\n    return Observable.empty().publish();\n  }\n\n  getAutocompleteSuggestions(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    request: AutocompleteRequest,\n  ): Promise<?AutocompleteResult> {\n    return Promise.resolve(null);\n  }\n\n  getDefinition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?DefinitionQueryResult> {\n    return Promise.resolve(null);\n  }\n\n  findReferences(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): ConnectableObservable<?FindReferencesReturn> {\n    return Observable.of(null).publish();\n  }\n\n  getCoverage(filePath: NuclideUri): Promise<?CoverageResult> {\n    return Promise.resolve(null);\n  }\n\n  getOutline(fileVersion: FileVersion): Promise<?Outline> {\n    return Promise.resolve(null);\n  }\n\n  getAdditionalLogFiles(\n    deadline: DeadlineRequest,\n  ): Promise<Array<AdditionalLogFile>> {\n    return Promise.resolve([]);\n  }\n\n  getCodeActions(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    diagnostics: Array<FileDiagnosticMessage>,\n  ): Promise<Array<CodeAction>> {\n    return Promise.resolve([]);\n  }\n\n  typeHint(fileVersion: FileVersion, position: atom$Point): Promise<?TypeHint> {\n    return Promise.resolve(null);\n  }\n\n  highlight(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?Array<atom$Range>> {\n    return Promise.resolve(null);\n  }\n\n  formatSource(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    options: FormatOptions,\n  ): Promise<?Array<TextEdit>> {\n    return Promise.resolve(null);\n  }\n\n  formatEntireFile(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    options: FormatOptions,\n  ): Promise<?{\n    newCursor?: number,\n    formatted: string,\n  }> {\n    return Promise.resolve(null);\n  }\n\n  formatAtPosition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    triggerCharacter: string,\n    options: FormatOptions,\n  ): Promise<?Array<TextEdit>> {\n    return Promise.resolve(null);\n  }\n\n  getEvaluationExpression(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?NuclideEvaluationExpression> {\n    return Promise.resolve(null);\n  }\n\n  supportsSymbolSearch(directories: Array<NuclideUri>): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  symbolSearch(\n    query: string,\n    directories: Array<NuclideUri>,\n  ): Promise<?Array<SymbolResult>> {\n    return Promise.resolve(null);\n  }\n\n  getProjectRoot(fileUri: NuclideUri): Promise<?NuclideUri> {\n    return Promise.resolve(null);\n  }\n\n  isFileInProject(fileUri: NuclideUri): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  getExpandedSelectionRange(\n    fileVersion: FileVersion,\n    currentSelection: atom$Range,\n  ): Promise<?atom$Range> {\n    return Promise.resolve(null);\n  }\n\n  getCollapsedSelectionRange(\n    fileVersion: FileVersion,\n    currentSelection: atom$Range,\n    originalCursorPosition: atom$Point,\n  ): Promise<?atom$Range> {\n    return Promise.resolve(null);\n  }\n\n  dispose(): void {}\n}\n\n// Assert that NullLanguageService satisifes the LanguageService interface:\n(((null: any): NullLanguageService): LanguageService);\n"]}