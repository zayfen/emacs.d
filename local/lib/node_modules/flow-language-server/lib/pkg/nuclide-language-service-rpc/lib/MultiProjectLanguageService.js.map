{"version":3,"sources":["../../../../src/pkg/nuclide-language-service-rpc/lib/MultiProjectLanguageService.js"],"names":["MultiProjectLanguageService","constructor","_observeDiagnosticsPromise","Promise","resolve","reject","_observeDiagnosticsPromiseResolver","initialize","logger","fileCache","host","projectFileNames","projectFileSearchStrategy","fileExtensions","languageServiceFactory","_logger","_resources","_configCache","undefined","_processes","value","then","process","dispose","add","configObserver","filePath","getConfigDir","observeConfigs","subscribe","configs","_ensureProcesses","_closeProcesses","observeFileEvents","ignoreElements","info","findProjectDir","_getLanguageServiceForFile","service","getLanguageServiceForFile","_getLanguageServicesForFiles","filePaths","promises","map","fileServices","all","results","Array","from","projectDir","get","result","delete","configPaths","join","setKeys","keys","clear","observeLanguageServices","observeValues","switchMap","fromPromise","getAllLanguageServices","lsPromises","values","getDiagnostics","fileVersion","hasObservedDiagnostics","observeDiagnostics","mergeMap","trace","refCount","catch","error","empty","publish","getAutocompleteSuggestions","position","request","getDefinition","findReferences","concatMap","ls","getCoverage","getOutline","getAdditionalLogFiles","deadline","roots","root","title","data","e","getCodeActions","range","diagnostics","typeHint","highlight","formatSource","options","formatEntireFile","formatAtPosition","triggerCharacter","getEvaluationExpression","supportsSymbolSearch","directories","serviceDirectories","eligibilities","dirs","some","symbolSearch","query","length","getProjectRoot","isFileInProject","getExpandedSelectionRange","currentSelection","getCollapsedSelectionRange","originalCursorPosition"],"mappings":"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","file":"MultiProjectLanguageService.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {NuclideUri} from 'nuclide-commons/nuclideUri';\nimport type {DeadlineRequest} from 'nuclide-commons/promise';\nimport type {SearchStrategy} from 'nuclide-commons/ConfigCache';\nimport type {AdditionalLogFile} from '../../nuclide-logging/lib/rpc-types';\nimport type {FileVersion} from '../../nuclide-open-files-rpc/lib/rpc-types';\nimport type {TextEdit} from 'nuclide-commons-atom/text-edit';\nimport type {TypeHint} from '../../nuclide-type-hint/lib/rpc-types';\nimport type {CoverageResult} from '../../nuclide-type-coverage/lib/rpc-types';\nimport type {\n  DefinitionQueryResult,\n  FindReferencesReturn,\n  Outline,\n  CodeAction,\n} from 'atom-ide-ui';\nimport type {\n  AutocompleteRequest,\n  AutocompleteResult,\n  FileDiagnosticMap,\n  FileDiagnosticMessage,\n  FormatOptions,\n  LanguageService,\n  SymbolResult,\n} from '../../nuclide-language-service/lib/LanguageService';\nimport type {HostServices} from '../../nuclide-language-service-rpc/lib/rpc-types';\nimport type {NuclideEvaluationExpression} from 'nuclide-debugger-common';\nimport type {ConnectableObservable} from 'rxjs';\n\nimport {timeoutAfterDeadline} from 'nuclide-commons/promise';\nimport {stringifyError} from 'nuclide-commons/string';\nimport {FileCache, ConfigObserver} from '../../nuclide-open-files-rpc';\nimport {Cache} from 'nuclide-commons/cache';\nimport {Observable} from 'rxjs';\nimport UniversalDisposable from 'nuclide-commons/UniversalDisposable';\nimport {compact} from 'nuclide-commons/observable';\nimport {arrayCompact, arrayFlatten, collect} from 'nuclide-commons/collection';\nimport {ConfigCache} from 'nuclide-commons/ConfigCache';\nimport {ensureInvalidations, NullLanguageService} from '..';\n\nexport class MultiProjectLanguageService<T: LanguageService = LanguageService> {\n  // Maps project dir => LanguageService\n  _processes: Cache<NuclideUri, Promise<?T>>;\n  _resources: UniversalDisposable;\n  _configCache: ConfigCache;\n  _logger: log4js$Logger;\n  // A promise for when AtomLanguageService has called into this feature\n  _observeDiagnosticsPromise: Promise<void>;\n  _observeDiagnosticsPromiseResolver: () => void;\n\n  constructor() {\n    this._observeDiagnosticsPromise = new Promise((resolve, reject) => {\n      this._observeDiagnosticsPromiseResolver = resolve;\n    });\n  }\n\n  initialize(\n    logger: log4js$Logger,\n    fileCache: FileCache,\n    host: HostServices,\n    projectFileNames: Array<string>,\n    projectFileSearchStrategy: ?SearchStrategy,\n    fileExtensions: Array<NuclideUri>,\n    languageServiceFactory: (projectDir: NuclideUri) => Promise<?T>,\n  ) {\n    this._logger = logger;\n    this._resources = new UniversalDisposable();\n    this._configCache = new ConfigCache(\n      projectFileNames,\n      projectFileSearchStrategy != null ? projectFileSearchStrategy : undefined,\n    );\n\n    this._processes = new Cache(languageServiceFactory, value => {\n      value.then(process => {\n        if (process != null) {\n          process.dispose();\n        }\n      });\n    });\n\n    this._resources.add(host, this._processes);\n\n    // Observe projects as they are opened\n    const configObserver = new ConfigObserver(\n      fileCache,\n      fileExtensions,\n      filePath => this._configCache.getConfigDir(filePath),\n    );\n    this._resources.add(\n      configObserver,\n      configObserver.observeConfigs().subscribe(configs => {\n        this._ensureProcesses(configs);\n      }),\n    );\n    this._resources.add(() => {\n      this._closeProcesses();\n    });\n\n    // Remove fileCache when the remote connection shuts down\n    this._resources.add(\n      fileCache\n        .observeFileEvents()\n        .ignoreElements()\n        .subscribe(\n          undefined, // next\n          undefined, // error\n          () => {\n            this._logger.info('fileCache shutting down.');\n            this._closeProcesses();\n          },\n        ),\n    );\n  }\n\n  findProjectDir(filePath: NuclideUri): Promise<?NuclideUri> {\n    return this._configCache.getConfigDir(filePath);\n  }\n\n  async _getLanguageServiceForFile(filePath: string): Promise<LanguageService> {\n    const service = await this.getLanguageServiceForFile(filePath);\n    if (service != null) {\n      return service;\n    } else {\n      return new NullLanguageService();\n    }\n  }\n\n  async _getLanguageServicesForFiles(\n    filePaths: Array<string>,\n  ): Promise<Array<[LanguageService, Array<string>]>> {\n    const promises: Array<Promise<?[LanguageService, string]>> = filePaths.map(\n      async filePath => {\n        const service = await this._getLanguageServiceForFile(filePath);\n        return service ? [service, filePath] : null;\n      },\n    );\n\n    const fileServices: Array<?[LanguageService, string]> = await Promise.all(\n      promises,\n    );\n\n    const results: Map<LanguageService, Array<string>> = collect(\n      arrayCompact(fileServices),\n    );\n\n    return Array.from(results);\n  }\n\n  async getLanguageServiceForFile(filePath: string): Promise<?T> {\n    const projectDir = await this.findProjectDir(filePath);\n    if (projectDir == null) {\n      return null;\n    }\n\n    const process = this._processes.get(projectDir);\n    process.then(result => {\n      // If we fail to connect, then retry on next request.\n      if (result == null) {\n        this._processes.delete(projectDir);\n      }\n    });\n    return process;\n  }\n\n  // Ensures that the only attached LanguageServices are those\n  // for the given configPaths.\n  // Closes all LanguageServices not in configPaths, and starts\n  // new LanguageServices for any paths in configPaths.\n  _ensureProcesses(configPaths: Set<NuclideUri>): void {\n    this._logger.info(\n      `MultiProjectLanguageService ensureProcesses. ${Array.from(\n        configPaths,\n      ).join(', ')}`,\n    );\n    this._processes.setKeys(configPaths);\n  }\n\n  // Closes all LanguageServices for this fileCache.\n  _closeProcesses(): void {\n    this._logger.info(\n      'Shutting down LanguageServices ' +\n        `${Array.from(this._processes.keys()).join(',')}`,\n    );\n    this._processes.clear();\n  }\n\n  observeLanguageServices(): Observable<T> {\n    this._logger.info('observing connections');\n    return compact(\n      this._processes\n        .observeValues()\n        .switchMap(process => Observable.fromPromise(process)),\n    );\n  }\n\n  async getAllLanguageServices(): Promise<Array<T>> {\n    const lsPromises: Array<Promise<?T>> = [...this._processes.values()];\n    return arrayCompact(await Promise.all(lsPromises));\n  }\n\n  async getDiagnostics(fileVersion: FileVersion): Promise<?FileDiagnosticMap> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getDiagnostics(fileVersion);\n  }\n\n  hasObservedDiagnostics(): Promise<void> {\n    return this._observeDiagnosticsPromise;\n  }\n\n  observeDiagnostics(): ConnectableObservable<FileDiagnosticMap> {\n    this._observeDiagnosticsPromiseResolver();\n\n    return this.observeLanguageServices()\n      .mergeMap((process: LanguageService) => {\n        this._logger.trace('observeDiagnostics');\n        return ensureInvalidations(\n          this._logger,\n          process\n            .observeDiagnostics()\n            .refCount()\n            .catch(error => {\n              this._logger.error('Error: observeDiagnostics', error);\n              return Observable.empty();\n            }),\n        );\n      })\n      .publish();\n  }\n\n  async getAutocompleteSuggestions(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    request: AutocompleteRequest,\n  ): Promise<?AutocompleteResult> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getAutocompleteSuggestions(fileVersion, position, request);\n  }\n\n  async getDefinition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?DefinitionQueryResult> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getDefinition(fileVersion, position);\n  }\n\n  findReferences(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): ConnectableObservable<?FindReferencesReturn> {\n    return Observable.fromPromise(\n      this._getLanguageServiceForFile(fileVersion.filePath),\n    )\n      .concatMap(ls => ls.findReferences(fileVersion, position).refCount())\n      .publish();\n  }\n\n  async getCoverage(filePath: NuclideUri): Promise<?CoverageResult> {\n    return (await this._getLanguageServiceForFile(filePath)).getCoverage(\n      filePath,\n    );\n  }\n\n  async getOutline(fileVersion: FileVersion): Promise<?Outline> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getOutline(fileVersion);\n  }\n\n  async getAdditionalLogFiles(\n    deadline: DeadlineRequest,\n  ): Promise<Array<AdditionalLogFile>> {\n    const roots: Array<NuclideUri> = Array.from(this._processes.keys());\n\n    const results = await Promise.all(\n      roots.map(async root => {\n        try {\n          const service = await timeoutAfterDeadline(\n            deadline,\n            this._processes.get(root),\n          );\n          if (service == null) {\n            return [{title: root, data: 'no language service'}];\n          } else {\n            return timeoutAfterDeadline(\n              deadline,\n              service.getAdditionalLogFiles(deadline - 1000),\n            );\n          }\n        } catch (e) {\n          return [{title: root, data: stringifyError(e)}];\n        }\n      }),\n    );\n    return arrayFlatten(results);\n  }\n\n  async getCodeActions(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    diagnostics: Array<FileDiagnosticMessage>,\n  ): Promise<Array<CodeAction>> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getCodeActions(fileVersion, range, diagnostics);\n  }\n\n  async typeHint(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?TypeHint> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).typeHint(fileVersion, position);\n  }\n\n  async highlight(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?Array<atom$Range>> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).highlight(fileVersion, position);\n  }\n\n  async formatSource(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    options: FormatOptions,\n  ): Promise<?Array<TextEdit>> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).formatSource(fileVersion, range, options);\n  }\n\n  async formatEntireFile(\n    fileVersion: FileVersion,\n    range: atom$Range,\n    options: FormatOptions,\n  ): Promise<?{\n    newCursor?: number,\n    formatted: string,\n  }> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).formatEntireFile(fileVersion, range, options);\n  }\n\n  async formatAtPosition(\n    fileVersion: FileVersion,\n    position: atom$Point,\n    triggerCharacter: string,\n    options: FormatOptions,\n  ): Promise<?Array<TextEdit>> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).formatAtPosition(fileVersion, position, triggerCharacter, options);\n  }\n\n  async getEvaluationExpression(\n    fileVersion: FileVersion,\n    position: atom$Point,\n  ): Promise<?NuclideEvaluationExpression> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getEvaluationExpression(fileVersion, position);\n  }\n\n  async supportsSymbolSearch(directories: Array<NuclideUri>): Promise<boolean> {\n    const serviceDirectories = await this._getLanguageServicesForFiles(\n      directories,\n    );\n    const eligibilities = await Promise.all(\n      serviceDirectories.map(([service, dirs]) =>\n        service.supportsSymbolSearch(dirs),\n      ),\n    );\n    return eligibilities.some(e => e);\n  }\n\n  async symbolSearch(\n    query: string,\n    directories: Array<NuclideUri>,\n  ): Promise<?Array<SymbolResult>> {\n    if (query.length === 0) {\n      return [];\n    }\n    const serviceDirectories = await this._getLanguageServicesForFiles(\n      directories,\n    );\n    const results = await Promise.all(\n      serviceDirectories.map(([service, dirs]) =>\n        service.symbolSearch(query, dirs),\n      ),\n    );\n    return arrayFlatten(arrayCompact(results));\n  }\n\n  async getProjectRoot(filePath: NuclideUri): Promise<?NuclideUri> {\n    return (await this._getLanguageServiceForFile(filePath)).getProjectRoot(\n      filePath,\n    );\n  }\n\n  async isFileInProject(filePath: NuclideUri): Promise<boolean> {\n    return (await this._getLanguageServiceForFile(filePath)).isFileInProject(\n      filePath,\n    );\n  }\n\n  async getExpandedSelectionRange(\n    fileVersion: FileVersion,\n    currentSelection: atom$Range,\n  ): Promise<?atom$Range> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getExpandedSelectionRange(fileVersion, currentSelection);\n  }\n\n  async getCollapsedSelectionRange(\n    fileVersion: FileVersion,\n    currentSelection: atom$Range,\n    originalCursorPosition: atom$Point,\n  ): Promise<?atom$Range> {\n    return (await this._getLanguageServiceForFile(\n      fileVersion.filePath,\n    )).getCollapsedSelectionRange(\n      fileVersion,\n      currentSelection,\n      originalCursorPosition,\n    );\n  }\n\n  dispose(): void {\n    this._resources.dispose();\n  }\n}\n\n// Enforces that an instance of MultiProjectLanguageService satisfies the LanguageService type\n(((null: any): MultiProjectLanguageService<>): LanguageService);\n"]}