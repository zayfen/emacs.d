{"version":3,"sources":["../../../../src/pkg/nuclide-quick-open/lib/types.js"],"names":["React"],"mappings":";;AAaA;;IAAYA,K","file":"types.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {NuclideUri} from 'nuclide-commons/nuclideUri';\n\nimport * as React from 'react';\n\nexport type CommandResult = {\n  resultType: 'COMMAND',\n  callback?: () => mixed,\n};\n\nexport type SymbolResult = {\n  resultType: 'SYMBOL',\n  path: NuclideUri,\n  line: number,\n  column: number,\n  name: string,\n  containerName: ?string,\n  icon: ?string, // from https://github.com/atom/atom/blob/master/static/octicons.less\n  hoverText: ?string, // sometimes used to explain the icon in words\n};\n\nexport type FileResult = {\n  resultType: 'FILE',\n  path: NuclideUri,\n  matchIndexes?: Array<number>,\n  score?: number,\n  // The original query that prompted this result, e.g. to highlight it in the UI.\n  query?: string,\n  context?: string,\n  timestamp?: number,\n  // Jump to line/column if provided.\n  line?: number,\n  column?: number,\n  // A custom callback to perform upon selection.\n  callback?: () => mixed,\n};\n\nexport type ProviderResult = CommandResult | FileResult | SymbolResult;\n\nexport type DirectoryProviderType<T: ProviderResult> = {\n  providerType: 'DIRECTORY',\n  name: string,\n  +debounceDelay?: number,\n  +display?: {\n    title: string,\n    prompt: string,\n    action?: string,\n    canOpenAll?: boolean,\n  },\n  +priority?: number,\n  isEligibleForDirectory(directory: atom$Directory): Promise<boolean>,\n  executeQuery(query: string, directory: atom$Directory): Promise<Array<T>>,\n  +getComponentForItem?: (item: T) => React.Element<any>,\n};\n\nexport type GlobalProviderType<T: ProviderResult> = {\n  providerType: 'GLOBAL',\n  name: string,\n  +debounceDelay?: number,\n  +display?: {\n    title: string,\n    prompt: string,\n    action?: string,\n    canOpenAll?: boolean,\n  },\n  +priority?: number,\n  isEligibleForDirectories(\n    directories: Array<atom$Directory>,\n  ): Promise<boolean>,\n  executeQuery(\n    query: string,\n    directories: Array<atom$Directory>,\n  ): Promise<Array<T>>,\n  +getComponentForItem?: (item: T) => React.Element<any>,\n};\n\nexport type Provider<T: ProviderResult> =\n  | DirectoryProviderType<T>\n  | GlobalProviderType<T>;\n"]}