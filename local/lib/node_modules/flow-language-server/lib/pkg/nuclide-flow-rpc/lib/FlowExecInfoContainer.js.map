{"version":3,"sources":["../../../../src/pkg/nuclide-flow-rpc/lib/FlowExecInfoContainer.js"],"names":["flowPath","root","result","cwd","undefined","toPromise","json","JSON","parse","flowVersion","semver","pathToFlow","binary","e","getFlowVersionInformation","process","platform","dirPath","dirname","canFindFlow","FLOW_BIN_PATH","FlowExecInfoContainer","constructor","versionInfo","_flowConfigDirCache","_flowExecInfoCache","max","maxAge","_disposables","_versionInfo","_canUseFlowBin","Boolean","_pathToFlow","dispose","reset","getFlowExecInfo","info","get","_computeFlowExecInfo","set","reallyGetFlowExecInfo","del","_getPathToFlow","execOptions","getFlowExecOptions","flowBinPath","_getFlowBinPath","systemFlowPath","cmdPath","join","findFlowConfigDir","localFile","getConfigDir","env","OCAMLRUNPARAM"],"mappings":"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","file":"FlowExecInfoContainer.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {LRUCache} from 'lru-cache';\n\nimport LRU from 'lru-cache';\n\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport UniversalDisposable from 'nuclide-commons/UniversalDisposable';\nimport which from 'nuclide-commons/which';\nimport {runCommand} from 'nuclide-commons/process';\nimport {ConfigCache} from 'nuclide-commons/ConfigCache';\n\nimport {getConfig} from './config';\n\nconst FLOW_BIN_PATH = 'node_modules/.bin/flow';\n\ntype FlowVersionInfo = {\n  pathToFlow: string,\n  flowVersion: string,\n};\n\n// All the information needed to execute Flow in a given root. The path to the Flow binary we want\n// to use may vary per root -- for now, only if we are using the version of Flow from `flow-bin`.\n// The options also vary, right now only because they set the cwd to the current Flow root.\nexport type FlowExecInfo = {\n  pathToFlow: string,\n  flowVersion: string,\n  execOptions: Object,\n};\n\nexport class FlowExecInfoContainer {\n  // Map from file path to the closest ancestor directory containing a .flowconfig file (the file's\n  // Flow root)\n  _flowConfigDirCache: ConfigCache;\n\n  // Map from Flow root directory (or null for \"no root\" e.g. files outside of a Flow root, or\n  // unsaved files. Useful for outline view) to FlowExecInfo. A null value means that the Flow\n  // binary cannot be found for that root. It is possible for Flow to be available in some roots but\n  // not others because we will support root-specific installations of flow-bin.\n  _flowExecInfoCache: LRUCache<?string, Promise<?FlowExecInfo>>;\n\n  _disposables: UniversalDisposable;\n\n  _pathToFlow: string;\n  _canUseFlowBin: boolean;\n  _versionInfo: ?FlowVersionInfo;\n\n  constructor(versionInfo: ?FlowVersionInfo) {\n    this._flowConfigDirCache = new ConfigCache(['.flowconfig']);\n\n    this._flowExecInfoCache = LRU({\n      max: 10,\n      maxAge: 1000 * 30, // 30 seconds\n    });\n\n    this._disposables = new UniversalDisposable();\n    this._versionInfo = versionInfo;\n\n    this._canUseFlowBin = Boolean(getConfig('canUseFlowBin'));\n    this._pathToFlow = ((getConfig('pathToFlow'): any): string);\n  }\n\n  dispose() {\n    this._disposables.dispose();\n    this._flowConfigDirCache.dispose();\n    this._flowExecInfoCache.reset();\n  }\n\n  // Returns null iff Flow cannot be found.\n  getFlowExecInfo(root: string | null): Promise<?FlowExecInfo> {\n    let info = this._flowExecInfoCache.get(root);\n    if (info == null) {\n      info = this._computeFlowExecInfo(root);\n      this._flowExecInfoCache.set(root, info);\n    }\n    return info;\n  }\n\n  reallyGetFlowExecInfo(root: string | null): Promise<?FlowExecInfo> {\n    this._flowExecInfoCache.del(root);\n    return this.getFlowExecInfo(root);\n  }\n\n  async _computeFlowExecInfo(root: string | null): Promise<?FlowExecInfo> {\n    let versionInfo;\n    if (this._versionInfo == null) {\n      const flowPath = await this._getPathToFlow(root);\n      if (flowPath == null) {\n        return null;\n      }\n      versionInfo = await getFlowVersionInformation(flowPath, root);\n      if (versionInfo == null) {\n        return null;\n      }\n    } else {\n      versionInfo = this._versionInfo;\n    }\n\n    return {\n      ...versionInfo,\n      execOptions: getFlowExecOptions(root),\n    };\n  }\n\n  // Return the path we should use to execute Flow for the given root, or null if Flow cannot be\n  // found.\n  async _getPathToFlow(root: string | null): Promise<?string> {\n    const flowBinPath = await this._getFlowBinPath(root);\n    if (flowBinPath != null && (await canFindFlow(flowBinPath))) {\n      return flowBinPath;\n    }\n\n    // Pull this into a local on the off chance that the setting changes while we are doing the\n    // check.\n    const systemFlowPath = this._pathToFlow;\n\n    // If on Windows, prefer the .cmd wrapper for flow if it's available.\n    if (process.platform === 'win32') {\n      const cmdPath = systemFlowPath + '.cmd';\n      if (await canFindFlow(systemFlowPath)) {\n        return cmdPath;\n      }\n    }\n\n    if (await canFindFlow(systemFlowPath)) {\n      return systemFlowPath;\n    }\n\n    return null;\n  }\n\n  async _getFlowBinPath(root: string | null): Promise<?string> {\n    if (root == null) {\n      return null;\n    }\n    if (!this._canUseFlowBin) {\n      return null;\n    }\n    // If we are running on Windows, we should use the .cmd version of flow.\n    if (process.platform === 'win32') {\n      return nuclideUri.join(root, FLOW_BIN_PATH + '.cmd');\n    }\n    return nuclideUri.join(root, FLOW_BIN_PATH);\n  }\n\n  async findFlowConfigDir(localFile: string): Promise<?string> {\n    return this._flowConfigDirCache.getConfigDir(localFile);\n  }\n}\n\nasync function getFlowVersionInformation(\n  flowPath: string,\n  root: string | null,\n): Promise<?{flowVersion: string, pathToFlow: string}> {\n  try {\n    const result = await runCommand(\n      flowPath,\n      ['version', '--json'],\n      root != null ? {cwd: root} : undefined,\n    ).toPromise();\n    const json = JSON.parse(result);\n    return {\n      flowVersion: json.semver,\n      pathToFlow: json.binary,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\nasync function canFindFlow(flowPath: string): Promise<boolean> {\n  if (process.platform === 'win32') {\n    // On Windows, if the flow path is configured as a full path rather than just \"flow\" or\n    // \"flow.exe\", format the path correctly to pass to `where <flow>`\n    const dirPath = nuclideUri.dirname(flowPath);\n    if (dirPath != null && dirPath !== '' && dirPath !== '.') {\n      return (await which(flowPath)) != null;\n    }\n  }\n\n  return (await which(flowPath)) != null;\n}\n\n// `string | null` forces the presence of an explicit argument (`?string` allows undefined which\n// means the argument can be left off altogether.\nfunction getFlowExecOptions(root: string | null): Object {\n  return {\n    cwd: root,\n    env: {\n      // Allows backtrace to be printed:\n      // http://caml.inria.fr/pub/docs/manual-ocaml/runtime.html#sec279\n      OCAMLRUNPARAM: 'b',\n      // Put this after so that if the user already has something set for OCAMLRUNPARAM we use\n      // that instead. They probably know what they're doing.\n      ...process.env,\n    },\n  };\n}\n"]}