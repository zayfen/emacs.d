{"version":3,"sources":["../../../../src/pkg/nuclide-logging/lib/rpc-types.js"],"names":["parseLogLevel","s","_default"],"mappings":";;;;;QAmCgBA,a,GAAAA,a;AAnChB;;;;;;;;;;;AAmCO,SAASA,aAAT,CAAuBC,CAAvB,EAAiCC,QAAjC,EAA+D;AACpE,MACED,MAAM,KAAN,IACAA,MAAM,OADN,IAEAA,MAAM,OAFN,IAGAA,MAAM,MAHN,IAIAA,MAAM,MAJN,IAKAA,MAAM,OALN,IAMAA,MAAM,OANN,IAOAA,MAAM,KARR,EASE;AACA,WAAOA,CAAP;AACD;AACD,SAAOC,QAAP;AACD","file":"rpc-types.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the license found in the LICENSE file in\n * the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type {DeadlineRequest} from 'nuclide-commons/promise';\n\nexport type LogLevel =\n  | 'ALL'\n  | 'TRACE'\n  | 'DEBUG'\n  | 'INFO'\n  | 'WARN'\n  | 'ERROR'\n  | 'FATAL'\n  | 'OFF';\n\nexport type AdditionalLogFilesProvider = {|\n  id: string,\n  getAdditionalLogFiles(\n    deadline: DeadlineRequest,\n  ): Promise<Array<AdditionalLogFile>>,\n|};\n\nexport type AdditionalLogFile = {\n  title: string, // usually a filepath\n  data: string,\n};\n\nexport function parseLogLevel(s: mixed, _default: LogLevel): LogLevel {\n  if (\n    s === 'ALL' ||\n    s === 'TRACE' ||\n    s === 'DEBUG' ||\n    s === 'INFO' ||\n    s === 'WARN' ||\n    s === 'ERROR' ||\n    s === 'FATAL' ||\n    s === 'OFF'\n  ) {\n    return s;\n  }\n  return _default;\n}\n"]}