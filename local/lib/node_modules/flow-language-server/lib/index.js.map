{"version":3,"sources":["../src/index.js"],"names":["rootPath","connection","flowOptions","versionLogger","flowPath","window","showInformationMessage","isAbsolute","showErrorMessage","flowVersionInfo","versionInfoForPath","info","downloadManagerLogger","error","bind","warn","versionInfo","autoDownloadFlow","reporter","semverDownloader","tryFlowBin","getFlowVersionInfo","createServer","SUPPORTS_PERSISTENT_CONNECTION","process","platform","initialFlowOptions","logger","disposable","documents","fileCache","add","onShutdown","debug","dispose","onInitialize","capabilities","root","resolve","cwd","flowContainer","flow","getServerStatusUpdates","distinctUntilChanged","subscribe","console","statusType","diagnostics","observe","diagnosticItems","forEach","sendDiagnostics","diagnoseAndSend","document","diagnoseOne","onDidSave","onDidOpen","completion","clientCapabilities","onCompletion","docParams","textDocument","uri","provideCompletionItems","onCompletionResolve","item","label","definition","onDefinition","provideDefinition","documentHighlight","onDocumentHighlight","provideDocumentHighlight","hover","onHover","provideHover","symbols","onDocumentSymbol","symbolParams","provideDocumentSymbol","textDocumentSync","syncKind","definitionProvider","documentSymbolProvider","completionProvider","resolveProvider","triggerCharacters","documentHighlightProvider","hoverProvider","listen"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n * @format\n */\n\nimport type {FlowOptions} from './types';\nimport type {InitializeParams} from 'vscode-languageserver/lib/protocol';\nimport type {VersionInfo} from 'flow-versions';\n\nimport nuclideUri from 'nuclide-commons/nuclideUri';\nimport UniversalDisposable from 'nuclide-commons/UniversalDisposable';\nimport path from 'path';\nimport {IConnection} from 'vscode-languageserver';\nimport type {ICompletionItem} from 'vscode-languageserver-types';\n\nimport Completion from './Completion';\nimport Definition from './Definition';\nimport Diagnostics from './Diagnostics';\nimport DocumentHighlight from './DocumentHighlight';\nimport Hover from './Hover';\nimport SymbolSupport from './Symbol';\nimport TextDocuments from './TextDocuments';\nimport {FileCache} from './pkg/nuclide-open-files-rpc/lib/FileCache';\nimport {FlowExecInfoContainer} from './pkg/nuclide-flow-rpc/lib/FlowExecInfoContainer';\nimport {FlowSingleProjectLanguageService} from './pkg/nuclide-flow-rpc/lib/FlowSingleProjectLanguageService';\nimport {getLogger} from 'log4js';\nimport {flowBinForRoot, githubSemverDownloader, utils} from 'flow-versions';\n\nconst SUPPORTS_PERSISTENT_CONNECTION = process.platform !== 'win32';\n\nexport function createServer(\n  connection: IConnection,\n  initialFlowOptions: FlowOptions,\n) {\n  const logger = getLogger('index');\n  const disposable = new UniversalDisposable();\n  const documents = new TextDocuments();\n  const fileCache = new FileCache();\n\n  disposable.add(documents);\n\n  connection.onShutdown(() => {\n    logger.debug('LSP server connection shutting down');\n    disposable.dispose();\n  });\n\n  connection.onInitialize(\n    async ({capabilities, rootPath}: InitializeParams) => {\n      // Flow trips on trailing slashes in root on Windows, `path.resolve` gets\n      // rid of it.\n      const root = path.resolve(rootPath || process.cwd());\n\n      logger.debug('LSP connection initialized. Connecting to flow...');\n\n      const flowVersionInfo = await getFlowVersionInfo(\n        root,\n        connection,\n        initialFlowOptions,\n      );\n      if (!flowVersionInfo) {\n        return {capabilities: {}};\n      }\n      const flowContainer = new FlowExecInfoContainer(flowVersionInfo);\n      const flow = new FlowSingleProjectLanguageService(\n        root,\n        flowContainer,\n        fileCache,\n      );\n\n      disposable.add(\n        flow,\n        flow\n          .getServerStatusUpdates()\n          .distinctUntilChanged()\n          .subscribe(statusType => {\n            connection.console.info(`Flow status: ${statusType}`);\n          }),\n      );\n\n      const diagnostics = new Diagnostics({flow});\n\n      if (SUPPORTS_PERSISTENT_CONNECTION) {\n        disposable.add(\n          diagnostics\n            .observe()\n            .subscribe(diagnosticItems =>\n              diagnosticItems.forEach(connection.sendDiagnostics),\n            ),\n        );\n      } else {\n        // Flow doesn't support its persistent connection well on Windows,\n        // so fall back to monitoring open and save events to offer diagnostics\n        const diagnoseAndSend = async function({document}) {\n          const diagnosticItems = await diagnostics.diagnoseOne(document);\n          diagnosticItems.forEach(connection.sendDiagnostics);\n        };\n\n        documents.onDidSave(diagnoseAndSend);\n        documents.onDidOpen(diagnoseAndSend);\n      }\n\n      const completion = new Completion({\n        clientCapabilities: capabilities,\n        documents,\n        flow,\n      });\n      connection.onCompletion(docParams => {\n        logger.debug(\n          `completion requested for document ${docParams.textDocument.uri}`,\n        );\n        return completion.provideCompletionItems(docParams);\n      });\n\n      connection.onCompletionResolve((item: ICompletionItem) => {\n        // for now, we return the item as is as we can't/don't need to provide\n        // any additional information on resolve, but need to respond to\n        // implement completion\n        logger.debug(`completionItem/resolve requested for item ${item.label}`);\n        return item;\n      });\n\n      const definition = new Definition({documents, flow});\n      connection.onDefinition(docParams => {\n        logger.debug(\n          `definition requested for document ${docParams.textDocument.uri}`,\n        );\n        return definition.provideDefinition(docParams);\n      });\n\n      const documentHighlight = new DocumentHighlight({documents, flow});\n      connection.onDocumentHighlight(docParams => {\n        return documentHighlight.provideDocumentHighlight(docParams);\n      });\n\n      const hover = new Hover({documents, flow});\n      connection.onHover(docParams => {\n        return hover.provideHover(docParams);\n      });\n\n      const symbols = new SymbolSupport({documents, flow});\n      connection.onDocumentSymbol(symbolParams => {\n        logger.debug(\n          `symbols requested for document ${symbolParams.textDocument.uri}`,\n        );\n        return symbols.provideDocumentSymbol(symbolParams);\n      });\n\n      logger.info('Flow language server started');\n\n      return {\n        capabilities: {\n          textDocumentSync: documents.syncKind,\n          definitionProvider: true,\n          documentSymbolProvider: true,\n          completionProvider: {\n            resolveProvider: true,\n            triggerCharacters: ['.'],\n          },\n          documentHighlightProvider: true,\n          hoverProvider: true,\n        },\n      };\n    },\n  );\n\n  return {\n    listen() {\n      documents.listen(connection);\n      connection.listen();\n    },\n  };\n}\n\nasync function getFlowVersionInfo(\n  rootPath: string,\n  connection: IConnection,\n  flowOptions: FlowOptions,\n): Promise<?VersionInfo> {\n  const versionLogger = getLogger('flow-versions');\n\n  if (flowOptions.flowPath != null) {\n    connection.window.showInformationMessage(\n      'path to flow ' + flowOptions.flowPath,\n    );\n    if (!nuclideUri.isAbsolute(flowOptions.flowPath)) {\n      connection.window.showErrorMessage(\n        'Supplied path to flow was not absolute. Specify a complete path to ' +\n          'the flow binary or leave the option empty for Flow to be managed ' +\n          'for you.',\n      );\n      return null;\n    }\n\n    const flowVersionInfo = await utils.versionInfoForPath(\n      rootPath,\n      flowOptions.flowPath,\n    );\n\n    if (!flowVersionInfo) {\n      connection.window.showErrorMessage('Invalid path to flow binary.');\n    }\n    versionLogger.info(\n      `Using the provided path to flow binary at ${flowOptions.flowPath}`,\n    );\n\n    return flowVersionInfo;\n  }\n\n  const downloadManagerLogger = {\n    error: connection.window.showErrorMessage.bind(connection.window),\n    info: versionLogger.info.bind(versionLogger),\n    warn: versionLogger.warn.bind(versionLogger),\n  };\n\n  const versionInfo = await flowBinForRoot(rootPath, {\n    autoDownloadFlow: flowOptions.autoDownloadFlow,\n    reporter: downloadManagerLogger,\n    semverDownloader: githubSemverDownloader,\n    tryFlowBin: flowOptions.tryFlowBin,\n  });\n\n  if (!versionInfo) {\n    versionLogger.error(\n      'There was a problem obtaining the appropriate version of flow for ' +\n        'your project. Please check the extension logs.',\n    );\n  }\n\n  return versionInfo;\n}\n"]}